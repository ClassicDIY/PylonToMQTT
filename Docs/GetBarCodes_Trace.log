GetBarCodes_Trace

250146C2E00201FD21
25014600B05031423437303130323137303939394420202020204D617220333020323032322C31383A31383A3136ED77

250246C2E00202FD1F
25014600B05031423437303130323137303939394420202020204D617220333020323032322C31383A31383A3136ED77

250346C2E00203FD1D
25014600B05031423437303130323137303939394420202020204D617220333020323032322C31383A31383A3136ED77

250446C2E00204FD1B
25014600B05031423437303130323137303939394420202020204D617220333020323032322C31383A31383A3136ED77

250546C2E00205FD19
25014600B05031423437303130323137303939394420202020204D617220333020323032322C31383A31383A3136ED77


000246C10000FDA0
000246C10000FDA0

var input = {};
input = msg.payload;
const barcodes = [
    "314234373031303230313032333844",
    "314234373031303230313032333845",
    "314234373031303230313032333846",
];


if (input[0] == '~') {
    let index = context.get('index') || 0
    index = (index + 1) % barcodes.length
    context.set('index', index);
    var addr = input[3] + input[4]
    var cmd = input[5] + input[6] + input[7] + input[8]
    var cell1 = getRandomInt(2800, 3600);
    var hcell1 = decimalToHex(cell1, 4);
    switch (cmd) {
        case '4690':
            msg.payload = `25${addr}4600E00203`;
            break;
        case '46C1':
            msg.payload = `25${addr}4600602850313653313030412D31423437302D312E303400`;
            break;
        case '46C2':
            msg.payload = `25${addr}4600B050${barcodes[index]}202020202044656420203720323032312C31373A35323A3338`;
            break;
        case '4642':
            msg.payload = `25014600D07C00${addr}10${hcell1}0D260D240D210D210D220D230D240D220D210D220D220D230D220D230D21060B230B210B270B260B450B4E0050D23307CF0221C6000B271063`;
            
            break;
        case '4644':
            msg.payload = `25014600E04E00${addr}10020202020101010000000000000000010602010101010100000000000000000000000000`;
            break;
    }
    return msg;
} 
